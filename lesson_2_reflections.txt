
REFLECTIONS FOR LESSON 2

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: What happens when you initialize a repository? Why do you need to do it?

A: On creation of a new repository Git make a new hidden directory for this 
repository called .git. The reason why we need to do it is necessity to have 
a place for saving repository metadata, i.e. commits and the like.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: How is the staging area different from the working directory and the 
repository? What value do you think it offers?

A: The staging area looks like a temporary warehouse for the files which should 
be commited in a short time. It might be quite useful to check the files before 
commit, especially if there are untracked files.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: How can you use the staging area to make sure you have one commit per 
logical change?

A: Staging area is a pretty useful tool to make sure of commiting oly necessary 
files including logically grouped changes. Without a staging area it would be 
much more difficult to track unecessary change that should be included in a 
certain commit. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

A: There are numerous situations when branches can help - new features, 
experiments and so on. The essence of branches is a possibility to easilu get 
changed versions of code in the same place as original version. That can 
seriuously reduce time and increase development productivity. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: How do the diagrams help you visualize the branch structure?

A: Of course, graphical representation of branches is much more easier than 
textual one. The most important and useful feature of these graphs is an 
ability to point places where branches fork.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

A: The result if merging two branches together is a only one set of file 
including changes made in two different branches. Diagram is an easiest way to 
explain merging thru the graphical representation or, simply speaking, picture.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing 
merges manually?

A: Git definitely does a very good job on automatic merging. It can and does 
help a lot in combining works of different people into one code. And much more
important that Git does not want to be a oracle and suppose which changes are 
good or bad. Instead, it just imforms us about conflicts in changes made by 
different pepople.    

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -